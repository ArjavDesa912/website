server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types 
        text/plain 
        text/css 
        text/xml 
        text/javascript 
        application/json 
        application/javascript 
        application/xml+rss 
        application/atom+xml 
        image/svg+xml;
    
    # Cache static assets
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, max-age=31536000, immutable";
        add_header Vary Accept-Encoding;
    }

    # Prerender for SEO bots
    location / {
        # Check if the request is from a bot/crawler
        set $prerender 0;
        if ($http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|facebookexternalhit|twitterbot|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
            set $prerender 1;
        }
        if ($args ~ "_escaped_fragment_") {
            set $prerender 1;
        }
        if ($http_user_agent ~ "Prerender") {
            set $prerender 0;
        }
        if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|svg|eot)") {
            set $prerender 0;
        }
        
        # If it's a bot, try to serve prerendered content
        if ($prerender = 1) {
            # For now, we'll use a meta refresh fallback
            # You can integrate with prerender.io or similar service later
            try_files $uri @prerender;
        }
        
        # Regular SPA routing for normal users
        try_files $uri $uri/ @fallback;
    }

    # Prerender fallback (basic SEO-friendly version)
    location @prerender {
        # Serve a basic HTML version with meta tags for SEO
        try_files /seo/$uri /seo/index.html @fallback;
    }

    # Fallback to index.html for SPA routing
    location @fallback {
        try_files /index.html =404;
    }

    # Special handling for sitemap and robots
    location = /robots.txt {
        try_files $uri $uri/ =404;
    }
    
    location = /sitemap.xml {
        try_files $uri $uri/ =404;
    }

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
}